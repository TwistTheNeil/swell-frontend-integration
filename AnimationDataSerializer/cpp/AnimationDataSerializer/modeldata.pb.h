// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AnimationDataSerializer/modeldata.proto

#ifndef PROTOBUF_AnimationDataSerializer_2fmodeldata_2eproto__INCLUDED
#define PROTOBUF_AnimationDataSerializer_2fmodeldata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace swellanimations {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
void protobuf_AssignDesc_AnimationDataSerializer_2fmodeldata_2eproto();
void protobuf_ShutdownFile_AnimationDataSerializer_2fmodeldata_2eproto();

class Node;

// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline ::google::protobuf::int32 data() const;
  inline void set_data(::google::protobuf::int32 value);

  // optional .swellanimations.Node childNode = 2;
  inline bool has_childnode() const;
  inline void clear_childnode();
  static const int kChildNodeFieldNumber = 2;
  inline const ::swellanimations::Node& childnode() const;
  inline ::swellanimations::Node* mutable_childnode();
  inline ::swellanimations::Node* release_childnode();
  inline void set_allocated_childnode(::swellanimations::Node* childnode);

  // @@protoc_insertion_point(class_scope:swellanimations.Node)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_childnode();
  inline void clear_has_childnode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::swellanimations::Node* childnode_;
  ::google::protobuf::int32 data_;
  friend void  protobuf_AddDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  friend void protobuf_AssignDesc_AnimationDataSerializer_2fmodeldata_2eproto();
  friend void protobuf_ShutdownFile_AnimationDataSerializer_2fmodeldata_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required int32 data = 1;
inline bool Node::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_data() {
  data_ = 0;
  clear_has_data();
}
inline ::google::protobuf::int32 Node::data() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.data)
  return data_;
}
inline void Node::set_data(::google::protobuf::int32 value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Node.data)
}

// optional .swellanimations.Node childNode = 2;
inline bool Node::has_childnode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_childnode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_childnode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_childnode() {
  if (childnode_ != NULL) childnode_->::swellanimations::Node::Clear();
  clear_has_childnode();
}
inline const ::swellanimations::Node& Node::childnode() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.childNode)
  return childnode_ != NULL ? *childnode_ : *default_instance_->childnode_;
}
inline ::swellanimations::Node* Node::mutable_childnode() {
  set_has_childnode();
  if (childnode_ == NULL) childnode_ = new ::swellanimations::Node;
  // @@protoc_insertion_point(field_mutable:swellanimations.Node.childNode)
  return childnode_;
}
inline ::swellanimations::Node* Node::release_childnode() {
  clear_has_childnode();
  ::swellanimations::Node* temp = childnode_;
  childnode_ = NULL;
  return temp;
}
inline void Node::set_allocated_childnode(::swellanimations::Node* childnode) {
  delete childnode_;
  childnode_ = childnode;
  if (childnode) {
    set_has_childnode();
  } else {
    clear_has_childnode();
  }
  // @@protoc_insertion_point(field_set_allocated:swellanimations.Node.childNode)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace swellanimations

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AnimationDataSerializer_2fmodeldata_2eproto__INCLUDED
