// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modeldata.proto

#ifndef PROTOBUF_modeldata_2eproto__INCLUDED
#define PROTOBUF_modeldata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace swellanimations {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_modeldata_2eproto();
void protobuf_AssignDesc_modeldata_2eproto();
void protobuf_ShutdownFile_modeldata_2eproto();

class Animation;
class ModelData;
class Vector;
class Node;
class RotationPoint;
class AnimationLayer;

// ===================================================================

class Animation : public ::google::protobuf::Message {
 public:
  Animation();
  virtual ~Animation();

  Animation(const Animation& from);

  inline Animation& operator=(const Animation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Animation& default_instance();

  void Swap(Animation* other);

  // implements Message ----------------------------------------------

  Animation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Animation& from);
  void MergeFrom(const Animation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .swellanimations.Node frames = 1;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 1;
  inline const ::swellanimations::Node& frames(int index) const;
  inline ::swellanimations::Node* mutable_frames(int index);
  inline ::swellanimations::Node* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >*
      mutable_frames();

  // repeated .swellanimations.Vector spline = 2;
  inline int spline_size() const;
  inline void clear_spline();
  static const int kSplineFieldNumber = 2;
  inline const ::swellanimations::Vector& spline(int index) const;
  inline ::swellanimations::Vector* mutable_spline(int index);
  inline ::swellanimations::Vector* add_spline();
  inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >&
      spline() const;
  inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >*
      mutable_spline();

  // @@protoc_insertion_point(class_scope:swellanimations.Animation)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::swellanimations::Node > frames_;
  ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector > spline_;
  friend void  protobuf_AddDesc_modeldata_2eproto();
  friend void protobuf_AssignDesc_modeldata_2eproto();
  friend void protobuf_ShutdownFile_modeldata_2eproto();

  void InitAsDefaultInstance();
  static Animation* default_instance_;
};
// -------------------------------------------------------------------

class ModelData : public ::google::protobuf::Message {
 public:
  ModelData();
  virtual ~ModelData();

  ModelData(const ModelData& from);

  inline ModelData& operator=(const ModelData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelData& default_instance();

  void Swap(ModelData* other);

  // implements Message ----------------------------------------------

  ModelData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelData& from);
  void MergeFrom(const ModelData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .swellanimations.Node model = 1;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 1;
  inline const ::swellanimations::Node& model() const;
  inline ::swellanimations::Node* mutable_model();
  inline ::swellanimations::Node* release_model();
  inline void set_allocated_model(::swellanimations::Node* model);

  // optional .swellanimations.Vector upVector = 2;
  inline bool has_upvector() const;
  inline void clear_upvector();
  static const int kUpVectorFieldNumber = 2;
  inline const ::swellanimations::Vector& upvector() const;
  inline ::swellanimations::Vector* mutable_upvector();
  inline ::swellanimations::Vector* release_upvector();
  inline void set_allocated_upvector(::swellanimations::Vector* upvector);

  // repeated .swellanimations.Vector controlPoints = 3;
  inline int controlpoints_size() const;
  inline void clear_controlpoints();
  static const int kControlPointsFieldNumber = 3;
  inline const ::swellanimations::Vector& controlpoints(int index) const;
  inline ::swellanimations::Vector* mutable_controlpoints(int index);
  inline ::swellanimations::Vector* add_controlpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >&
      controlpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >*
      mutable_controlpoints();

  // repeated .swellanimations.RotationPoint rotationpoints = 4;
  inline int rotationpoints_size() const;
  inline void clear_rotationpoints();
  static const int kRotationpointsFieldNumber = 4;
  inline const ::swellanimations::RotationPoint& rotationpoints(int index) const;
  inline ::swellanimations::RotationPoint* mutable_rotationpoints(int index);
  inline ::swellanimations::RotationPoint* add_rotationpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::RotationPoint >&
      rotationpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::swellanimations::RotationPoint >*
      mutable_rotationpoints();

  // required int32 numberOfFrames = 5;
  inline bool has_numberofframes() const;
  inline void clear_numberofframes();
  static const int kNumberOfFramesFieldNumber = 5;
  inline ::google::protobuf::int32 numberofframes() const;
  inline void set_numberofframes(::google::protobuf::int32 value);

  // repeated .swellanimations.AnimationLayer animationLayers = 6;
  inline int animationlayers_size() const;
  inline void clear_animationlayers();
  static const int kAnimationLayersFieldNumber = 6;
  inline const ::swellanimations::AnimationLayer& animationlayers(int index) const;
  inline ::swellanimations::AnimationLayer* mutable_animationlayers(int index);
  inline ::swellanimations::AnimationLayer* add_animationlayers();
  inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::AnimationLayer >&
      animationlayers() const;
  inline ::google::protobuf::RepeatedPtrField< ::swellanimations::AnimationLayer >*
      mutable_animationlayers();

  // @@protoc_insertion_point(class_scope:swellanimations.ModelData)
 private:
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_upvector();
  inline void clear_has_upvector();
  inline void set_has_numberofframes();
  inline void clear_has_numberofframes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::swellanimations::Node* model_;
  ::swellanimations::Vector* upvector_;
  ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector > controlpoints_;
  ::google::protobuf::RepeatedPtrField< ::swellanimations::RotationPoint > rotationpoints_;
  ::google::protobuf::RepeatedPtrField< ::swellanimations::AnimationLayer > animationlayers_;
  ::google::protobuf::int32 numberofframes_;
  friend void  protobuf_AddDesc_modeldata_2eproto();
  friend void protobuf_AssignDesc_modeldata_2eproto();
  friend void protobuf_ShutdownFile_modeldata_2eproto();

  void InitAsDefaultInstance();
  static ModelData* default_instance_;
};
// -------------------------------------------------------------------

class Vector : public ::google::protobuf::Message {
 public:
  Vector();
  virtual ~Vector();

  Vector(const Vector& from);

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector& default_instance();

  void Swap(Vector* other);

  // implements Message ----------------------------------------------

  Vector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:swellanimations.Vector)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_modeldata_2eproto();
  friend void protobuf_AssignDesc_modeldata_2eproto();
  friend void protobuf_ShutdownFile_modeldata_2eproto();

  void InitAsDefaultInstance();
  static Vector* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .swellanimations.Vector position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::swellanimations::Vector& position() const;
  inline ::swellanimations::Vector* mutable_position();
  inline ::swellanimations::Vector* release_position();
  inline void set_allocated_position(::swellanimations::Vector* position);

  // optional .swellanimations.Vector eularAngles = 3;
  inline bool has_eularangles() const;
  inline void clear_eularangles();
  static const int kEularAnglesFieldNumber = 3;
  inline const ::swellanimations::Vector& eularangles() const;
  inline ::swellanimations::Vector* mutable_eularangles();
  inline ::swellanimations::Vector* release_eularangles();
  inline void set_allocated_eularangles(::swellanimations::Vector* eularangles);

  // repeated .swellanimations.Node children = 4;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 4;
  inline const ::swellanimations::Node& children(int index) const;
  inline ::swellanimations::Node* mutable_children(int index);
  inline ::swellanimations::Node* add_children();
  inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >&
      children() const;
  inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >*
      mutable_children();

  // optional .swellanimations.Node parent = 5;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 5;
  inline const ::swellanimations::Node& parent() const;
  inline ::swellanimations::Node* mutable_parent();
  inline ::swellanimations::Node* release_parent();
  inline void set_allocated_parent(::swellanimations::Node* parent);

  // @@protoc_insertion_point(class_scope:swellanimations.Node)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_eularangles();
  inline void clear_has_eularangles();
  inline void set_has_parent();
  inline void clear_has_parent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::swellanimations::Vector* position_;
  ::swellanimations::Vector* eularangles_;
  ::google::protobuf::RepeatedPtrField< ::swellanimations::Node > children_;
  ::swellanimations::Node* parent_;
  friend void  protobuf_AddDesc_modeldata_2eproto();
  friend void protobuf_AssignDesc_modeldata_2eproto();
  friend void protobuf_ShutdownFile_modeldata_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class RotationPoint : public ::google::protobuf::Message {
 public:
  RotationPoint();
  virtual ~RotationPoint();

  RotationPoint(const RotationPoint& from);

  inline RotationPoint& operator=(const RotationPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotationPoint& default_instance();

  void Swap(RotationPoint* other);

  // implements Message ----------------------------------------------

  RotationPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotationPoint& from);
  void MergeFrom(const RotationPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .swellanimations.Vector Rotation = 1;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 1;
  inline const ::swellanimations::Vector& rotation() const;
  inline ::swellanimations::Vector* mutable_rotation();
  inline ::swellanimations::Vector* release_rotation();
  inline void set_allocated_rotation(::swellanimations::Vector* rotation);

  // required int32 numFrames = 2;
  inline bool has_numframes() const;
  inline void clear_numframes();
  static const int kNumFramesFieldNumber = 2;
  inline ::google::protobuf::int32 numframes() const;
  inline void set_numframes(::google::protobuf::int32 value);

  // required int32 startFrame = 3;
  inline bool has_startframe() const;
  inline void clear_startframe();
  static const int kStartFrameFieldNumber = 3;
  inline ::google::protobuf::int32 startframe() const;
  inline void set_startframe(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:swellanimations.RotationPoint)
 private:
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_numframes();
  inline void clear_has_numframes();
  inline void set_has_startframe();
  inline void clear_has_startframe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::swellanimations::Vector* rotation_;
  ::google::protobuf::int32 numframes_;
  ::google::protobuf::int32 startframe_;
  friend void  protobuf_AddDesc_modeldata_2eproto();
  friend void protobuf_AssignDesc_modeldata_2eproto();
  friend void protobuf_ShutdownFile_modeldata_2eproto();

  void InitAsDefaultInstance();
  static RotationPoint* default_instance_;
};
// -------------------------------------------------------------------

class AnimationLayer : public ::google::protobuf::Message {
 public:
  AnimationLayer();
  virtual ~AnimationLayer();

  AnimationLayer(const AnimationLayer& from);

  inline AnimationLayer& operator=(const AnimationLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnimationLayer& default_instance();

  void Swap(AnimationLayer* other);

  // implements Message ----------------------------------------------

  AnimationLayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnimationLayer& from);
  void MergeFrom(const AnimationLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .swellanimations.Vector layerPoints = 1;
  inline int layerpoints_size() const;
  inline void clear_layerpoints();
  static const int kLayerPointsFieldNumber = 1;
  inline const ::swellanimations::Vector& layerpoints(int index) const;
  inline ::swellanimations::Vector* mutable_layerpoints(int index);
  inline ::swellanimations::Vector* add_layerpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >&
      layerpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >*
      mutable_layerpoints();

  // required int32 numFrames = 2;
  inline bool has_numframes() const;
  inline void clear_numframes();
  static const int kNumFramesFieldNumber = 2;
  inline ::google::protobuf::int32 numframes() const;
  inline void set_numframes(::google::protobuf::int32 value);

  // required int32 startFrame = 3;
  inline bool has_startframe() const;
  inline void clear_startframe();
  static const int kStartFrameFieldNumber = 3;
  inline ::google::protobuf::int32 startframe() const;
  inline void set_startframe(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:swellanimations.AnimationLayer)
 private:
  inline void set_has_numframes();
  inline void clear_has_numframes();
  inline void set_has_startframe();
  inline void clear_has_startframe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector > layerpoints_;
  ::google::protobuf::int32 numframes_;
  ::google::protobuf::int32 startframe_;
  friend void  protobuf_AddDesc_modeldata_2eproto();
  friend void protobuf_AssignDesc_modeldata_2eproto();
  friend void protobuf_ShutdownFile_modeldata_2eproto();

  void InitAsDefaultInstance();
  static AnimationLayer* default_instance_;
};
// ===================================================================


// ===================================================================

// Animation

// repeated .swellanimations.Node frames = 1;
inline int Animation::frames_size() const {
  return frames_.size();
}
inline void Animation::clear_frames() {
  frames_.Clear();
}
inline const ::swellanimations::Node& Animation::frames(int index) const {
  // @@protoc_insertion_point(field_get:swellanimations.Animation.frames)
  return frames_.Get(index);
}
inline ::swellanimations::Node* Animation::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:swellanimations.Animation.frames)
  return frames_.Mutable(index);
}
inline ::swellanimations::Node* Animation::add_frames() {
  // @@protoc_insertion_point(field_add:swellanimations.Animation.frames)
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >&
Animation::frames() const {
  // @@protoc_insertion_point(field_list:swellanimations.Animation.frames)
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >*
Animation::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:swellanimations.Animation.frames)
  return &frames_;
}

// repeated .swellanimations.Vector spline = 2;
inline int Animation::spline_size() const {
  return spline_.size();
}
inline void Animation::clear_spline() {
  spline_.Clear();
}
inline const ::swellanimations::Vector& Animation::spline(int index) const {
  // @@protoc_insertion_point(field_get:swellanimations.Animation.spline)
  return spline_.Get(index);
}
inline ::swellanimations::Vector* Animation::mutable_spline(int index) {
  // @@protoc_insertion_point(field_mutable:swellanimations.Animation.spline)
  return spline_.Mutable(index);
}
inline ::swellanimations::Vector* Animation::add_spline() {
  // @@protoc_insertion_point(field_add:swellanimations.Animation.spline)
  return spline_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >&
Animation::spline() const {
  // @@protoc_insertion_point(field_list:swellanimations.Animation.spline)
  return spline_;
}
inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >*
Animation::mutable_spline() {
  // @@protoc_insertion_point(field_mutable_list:swellanimations.Animation.spline)
  return &spline_;
}

// -------------------------------------------------------------------

// ModelData

// optional .swellanimations.Node model = 1;
inline bool ModelData::has_model() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelData::set_has_model() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelData::clear_has_model() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelData::clear_model() {
  if (model_ != NULL) model_->::swellanimations::Node::Clear();
  clear_has_model();
}
inline const ::swellanimations::Node& ModelData::model() const {
  // @@protoc_insertion_point(field_get:swellanimations.ModelData.model)
  return model_ != NULL ? *model_ : *default_instance_->model_;
}
inline ::swellanimations::Node* ModelData::mutable_model() {
  set_has_model();
  if (model_ == NULL) model_ = new ::swellanimations::Node;
  // @@protoc_insertion_point(field_mutable:swellanimations.ModelData.model)
  return model_;
}
inline ::swellanimations::Node* ModelData::release_model() {
  clear_has_model();
  ::swellanimations::Node* temp = model_;
  model_ = NULL;
  return temp;
}
inline void ModelData::set_allocated_model(::swellanimations::Node* model) {
  delete model_;
  model_ = model;
  if (model) {
    set_has_model();
  } else {
    clear_has_model();
  }
  // @@protoc_insertion_point(field_set_allocated:swellanimations.ModelData.model)
}

// optional .swellanimations.Vector upVector = 2;
inline bool ModelData::has_upvector() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelData::set_has_upvector() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelData::clear_has_upvector() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelData::clear_upvector() {
  if (upvector_ != NULL) upvector_->::swellanimations::Vector::Clear();
  clear_has_upvector();
}
inline const ::swellanimations::Vector& ModelData::upvector() const {
  // @@protoc_insertion_point(field_get:swellanimations.ModelData.upVector)
  return upvector_ != NULL ? *upvector_ : *default_instance_->upvector_;
}
inline ::swellanimations::Vector* ModelData::mutable_upvector() {
  set_has_upvector();
  if (upvector_ == NULL) upvector_ = new ::swellanimations::Vector;
  // @@protoc_insertion_point(field_mutable:swellanimations.ModelData.upVector)
  return upvector_;
}
inline ::swellanimations::Vector* ModelData::release_upvector() {
  clear_has_upvector();
  ::swellanimations::Vector* temp = upvector_;
  upvector_ = NULL;
  return temp;
}
inline void ModelData::set_allocated_upvector(::swellanimations::Vector* upvector) {
  delete upvector_;
  upvector_ = upvector;
  if (upvector) {
    set_has_upvector();
  } else {
    clear_has_upvector();
  }
  // @@protoc_insertion_point(field_set_allocated:swellanimations.ModelData.upVector)
}

// repeated .swellanimations.Vector controlPoints = 3;
inline int ModelData::controlpoints_size() const {
  return controlpoints_.size();
}
inline void ModelData::clear_controlpoints() {
  controlpoints_.Clear();
}
inline const ::swellanimations::Vector& ModelData::controlpoints(int index) const {
  // @@protoc_insertion_point(field_get:swellanimations.ModelData.controlPoints)
  return controlpoints_.Get(index);
}
inline ::swellanimations::Vector* ModelData::mutable_controlpoints(int index) {
  // @@protoc_insertion_point(field_mutable:swellanimations.ModelData.controlPoints)
  return controlpoints_.Mutable(index);
}
inline ::swellanimations::Vector* ModelData::add_controlpoints() {
  // @@protoc_insertion_point(field_add:swellanimations.ModelData.controlPoints)
  return controlpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >&
ModelData::controlpoints() const {
  // @@protoc_insertion_point(field_list:swellanimations.ModelData.controlPoints)
  return controlpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >*
ModelData::mutable_controlpoints() {
  // @@protoc_insertion_point(field_mutable_list:swellanimations.ModelData.controlPoints)
  return &controlpoints_;
}

// repeated .swellanimations.RotationPoint rotationpoints = 4;
inline int ModelData::rotationpoints_size() const {
  return rotationpoints_.size();
}
inline void ModelData::clear_rotationpoints() {
  rotationpoints_.Clear();
}
inline const ::swellanimations::RotationPoint& ModelData::rotationpoints(int index) const {
  // @@protoc_insertion_point(field_get:swellanimations.ModelData.rotationpoints)
  return rotationpoints_.Get(index);
}
inline ::swellanimations::RotationPoint* ModelData::mutable_rotationpoints(int index) {
  // @@protoc_insertion_point(field_mutable:swellanimations.ModelData.rotationpoints)
  return rotationpoints_.Mutable(index);
}
inline ::swellanimations::RotationPoint* ModelData::add_rotationpoints() {
  // @@protoc_insertion_point(field_add:swellanimations.ModelData.rotationpoints)
  return rotationpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::RotationPoint >&
ModelData::rotationpoints() const {
  // @@protoc_insertion_point(field_list:swellanimations.ModelData.rotationpoints)
  return rotationpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::swellanimations::RotationPoint >*
ModelData::mutable_rotationpoints() {
  // @@protoc_insertion_point(field_mutable_list:swellanimations.ModelData.rotationpoints)
  return &rotationpoints_;
}

// required int32 numberOfFrames = 5;
inline bool ModelData::has_numberofframes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelData::set_has_numberofframes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelData::clear_has_numberofframes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelData::clear_numberofframes() {
  numberofframes_ = 0;
  clear_has_numberofframes();
}
inline ::google::protobuf::int32 ModelData::numberofframes() const {
  // @@protoc_insertion_point(field_get:swellanimations.ModelData.numberOfFrames)
  return numberofframes_;
}
inline void ModelData::set_numberofframes(::google::protobuf::int32 value) {
  set_has_numberofframes();
  numberofframes_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.ModelData.numberOfFrames)
}

// repeated .swellanimations.AnimationLayer animationLayers = 6;
inline int ModelData::animationlayers_size() const {
  return animationlayers_.size();
}
inline void ModelData::clear_animationlayers() {
  animationlayers_.Clear();
}
inline const ::swellanimations::AnimationLayer& ModelData::animationlayers(int index) const {
  // @@protoc_insertion_point(field_get:swellanimations.ModelData.animationLayers)
  return animationlayers_.Get(index);
}
inline ::swellanimations::AnimationLayer* ModelData::mutable_animationlayers(int index) {
  // @@protoc_insertion_point(field_mutable:swellanimations.ModelData.animationLayers)
  return animationlayers_.Mutable(index);
}
inline ::swellanimations::AnimationLayer* ModelData::add_animationlayers() {
  // @@protoc_insertion_point(field_add:swellanimations.ModelData.animationLayers)
  return animationlayers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::AnimationLayer >&
ModelData::animationlayers() const {
  // @@protoc_insertion_point(field_list:swellanimations.ModelData.animationLayers)
  return animationlayers_;
}
inline ::google::protobuf::RepeatedPtrField< ::swellanimations::AnimationLayer >*
ModelData::mutable_animationlayers() {
  // @@protoc_insertion_point(field_mutable_list:swellanimations.ModelData.animationLayers)
  return &animationlayers_;
}

// -------------------------------------------------------------------

// Vector

// required float x = 1;
inline bool Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector::x() const {
  // @@protoc_insertion_point(field_get:swellanimations.Vector.x)
  return x_;
}
inline void Vector::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Vector.x)
}

// required float y = 2;
inline bool Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector::y() const {
  // @@protoc_insertion_point(field_get:swellanimations.Vector.y)
  return y_;
}
inline void Vector::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Vector.y)
}

// required float z = 3;
inline bool Vector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector::z() const {
  // @@protoc_insertion_point(field_get:swellanimations.Vector.z)
  return z_;
}
inline void Vector::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.Vector.z)
}

// -------------------------------------------------------------------

// Node

// optional string name = 1;
inline bool Node::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.name)
  return *name_;
}
inline void Node::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:swellanimations.Node.name)
}
inline void Node::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:swellanimations.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:swellanimations.Node.name)
}
inline ::std::string* Node::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:swellanimations.Node.name)
  return name_;
}
inline ::std::string* Node::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:swellanimations.Node.name)
}

// optional .swellanimations.Vector position = 2;
inline bool Node::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_position() {
  if (position_ != NULL) position_->::swellanimations::Vector::Clear();
  clear_has_position();
}
inline const ::swellanimations::Vector& Node::position() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::swellanimations::Vector* Node::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::swellanimations::Vector;
  // @@protoc_insertion_point(field_mutable:swellanimations.Node.position)
  return position_;
}
inline ::swellanimations::Vector* Node::release_position() {
  clear_has_position();
  ::swellanimations::Vector* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Node::set_allocated_position(::swellanimations::Vector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:swellanimations.Node.position)
}

// optional .swellanimations.Vector eularAngles = 3;
inline bool Node::has_eularangles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_eularangles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_eularangles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_eularangles() {
  if (eularangles_ != NULL) eularangles_->::swellanimations::Vector::Clear();
  clear_has_eularangles();
}
inline const ::swellanimations::Vector& Node::eularangles() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.eularAngles)
  return eularangles_ != NULL ? *eularangles_ : *default_instance_->eularangles_;
}
inline ::swellanimations::Vector* Node::mutable_eularangles() {
  set_has_eularangles();
  if (eularangles_ == NULL) eularangles_ = new ::swellanimations::Vector;
  // @@protoc_insertion_point(field_mutable:swellanimations.Node.eularAngles)
  return eularangles_;
}
inline ::swellanimations::Vector* Node::release_eularangles() {
  clear_has_eularangles();
  ::swellanimations::Vector* temp = eularangles_;
  eularangles_ = NULL;
  return temp;
}
inline void Node::set_allocated_eularangles(::swellanimations::Vector* eularangles) {
  delete eularangles_;
  eularangles_ = eularangles;
  if (eularangles) {
    set_has_eularangles();
  } else {
    clear_has_eularangles();
  }
  // @@protoc_insertion_point(field_set_allocated:swellanimations.Node.eularAngles)
}

// repeated .swellanimations.Node children = 4;
inline int Node::children_size() const {
  return children_.size();
}
inline void Node::clear_children() {
  children_.Clear();
}
inline const ::swellanimations::Node& Node::children(int index) const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.children)
  return children_.Get(index);
}
inline ::swellanimations::Node* Node::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:swellanimations.Node.children)
  return children_.Mutable(index);
}
inline ::swellanimations::Node* Node::add_children() {
  // @@protoc_insertion_point(field_add:swellanimations.Node.children)
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >&
Node::children() const {
  // @@protoc_insertion_point(field_list:swellanimations.Node.children)
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Node >*
Node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:swellanimations.Node.children)
  return &children_;
}

// optional .swellanimations.Node parent = 5;
inline bool Node::has_parent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_parent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_parent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_parent() {
  if (parent_ != NULL) parent_->::swellanimations::Node::Clear();
  clear_has_parent();
}
inline const ::swellanimations::Node& Node::parent() const {
  // @@protoc_insertion_point(field_get:swellanimations.Node.parent)
  return parent_ != NULL ? *parent_ : *default_instance_->parent_;
}
inline ::swellanimations::Node* Node::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) parent_ = new ::swellanimations::Node;
  // @@protoc_insertion_point(field_mutable:swellanimations.Node.parent)
  return parent_;
}
inline ::swellanimations::Node* Node::release_parent() {
  clear_has_parent();
  ::swellanimations::Node* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline void Node::set_allocated_parent(::swellanimations::Node* parent) {
  delete parent_;
  parent_ = parent;
  if (parent) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
  // @@protoc_insertion_point(field_set_allocated:swellanimations.Node.parent)
}

// -------------------------------------------------------------------

// RotationPoint

// required .swellanimations.Vector Rotation = 1;
inline bool RotationPoint::has_rotation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotationPoint::set_has_rotation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RotationPoint::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RotationPoint::clear_rotation() {
  if (rotation_ != NULL) rotation_->::swellanimations::Vector::Clear();
  clear_has_rotation();
}
inline const ::swellanimations::Vector& RotationPoint::rotation() const {
  // @@protoc_insertion_point(field_get:swellanimations.RotationPoint.Rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::swellanimations::Vector* RotationPoint::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::swellanimations::Vector;
  // @@protoc_insertion_point(field_mutable:swellanimations.RotationPoint.Rotation)
  return rotation_;
}
inline ::swellanimations::Vector* RotationPoint::release_rotation() {
  clear_has_rotation();
  ::swellanimations::Vector* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void RotationPoint::set_allocated_rotation(::swellanimations::Vector* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:swellanimations.RotationPoint.Rotation)
}

// required int32 numFrames = 2;
inline bool RotationPoint::has_numframes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RotationPoint::set_has_numframes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RotationPoint::clear_has_numframes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RotationPoint::clear_numframes() {
  numframes_ = 0;
  clear_has_numframes();
}
inline ::google::protobuf::int32 RotationPoint::numframes() const {
  // @@protoc_insertion_point(field_get:swellanimations.RotationPoint.numFrames)
  return numframes_;
}
inline void RotationPoint::set_numframes(::google::protobuf::int32 value) {
  set_has_numframes();
  numframes_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.RotationPoint.numFrames)
}

// required int32 startFrame = 3;
inline bool RotationPoint::has_startframe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RotationPoint::set_has_startframe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RotationPoint::clear_has_startframe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RotationPoint::clear_startframe() {
  startframe_ = 0;
  clear_has_startframe();
}
inline ::google::protobuf::int32 RotationPoint::startframe() const {
  // @@protoc_insertion_point(field_get:swellanimations.RotationPoint.startFrame)
  return startframe_;
}
inline void RotationPoint::set_startframe(::google::protobuf::int32 value) {
  set_has_startframe();
  startframe_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.RotationPoint.startFrame)
}

// -------------------------------------------------------------------

// AnimationLayer

// repeated .swellanimations.Vector layerPoints = 1;
inline int AnimationLayer::layerpoints_size() const {
  return layerpoints_.size();
}
inline void AnimationLayer::clear_layerpoints() {
  layerpoints_.Clear();
}
inline const ::swellanimations::Vector& AnimationLayer::layerpoints(int index) const {
  // @@protoc_insertion_point(field_get:swellanimations.AnimationLayer.layerPoints)
  return layerpoints_.Get(index);
}
inline ::swellanimations::Vector* AnimationLayer::mutable_layerpoints(int index) {
  // @@protoc_insertion_point(field_mutable:swellanimations.AnimationLayer.layerPoints)
  return layerpoints_.Mutable(index);
}
inline ::swellanimations::Vector* AnimationLayer::add_layerpoints() {
  // @@protoc_insertion_point(field_add:swellanimations.AnimationLayer.layerPoints)
  return layerpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >&
AnimationLayer::layerpoints() const {
  // @@protoc_insertion_point(field_list:swellanimations.AnimationLayer.layerPoints)
  return layerpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::swellanimations::Vector >*
AnimationLayer::mutable_layerpoints() {
  // @@protoc_insertion_point(field_mutable_list:swellanimations.AnimationLayer.layerPoints)
  return &layerpoints_;
}

// required int32 numFrames = 2;
inline bool AnimationLayer::has_numframes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnimationLayer::set_has_numframes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnimationLayer::clear_has_numframes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnimationLayer::clear_numframes() {
  numframes_ = 0;
  clear_has_numframes();
}
inline ::google::protobuf::int32 AnimationLayer::numframes() const {
  // @@protoc_insertion_point(field_get:swellanimations.AnimationLayer.numFrames)
  return numframes_;
}
inline void AnimationLayer::set_numframes(::google::protobuf::int32 value) {
  set_has_numframes();
  numframes_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.AnimationLayer.numFrames)
}

// required int32 startFrame = 3;
inline bool AnimationLayer::has_startframe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnimationLayer::set_has_startframe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnimationLayer::clear_has_startframe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnimationLayer::clear_startframe() {
  startframe_ = 0;
  clear_has_startframe();
}
inline ::google::protobuf::int32 AnimationLayer::startframe() const {
  // @@protoc_insertion_point(field_get:swellanimations.AnimationLayer.startFrame)
  return startframe_;
}
inline void AnimationLayer::set_startframe(::google::protobuf::int32 value) {
  set_has_startframe();
  startframe_ = value;
  // @@protoc_insertion_point(field_set:swellanimations.AnimationLayer.startFrame)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace swellanimations

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modeldata_2eproto__INCLUDED
